# Add this to your .bashrc and .zshrc etc..
# [[ ! -f ~/shell.cfg ]] || source ~/shell.cfg;

xset r rate 250 50

export LOCALBIN="$HOME/.local/bin"
export MYSTORAGE="/mnt/storage"
export MYGITHUB="github.com/sirjager"
export MYSCRIPTS="$HOME/.config/scripts"
export MYPROGRAMS="$MYSTORAGE/programs"
export PATH=$PATH:$LOCALBIN:$MYSCRIPTS

# All Exports
export EDITOR="nvim" 
export ALTERNATE_EDITOR="vim"
export TERMINAL=alacritty
export BROWSER=vivaldi-stable #
export LSCOLORS=0xGxBxDxCxEgEdxbxgxcxd	# terminal colors releated
export PG_COLOR=always	# postgres
# export DRI_PRIME=1 	# For graphic card
export _JAVA_AWT_WM_NONREPARENTING=1 # For Java Applications
export XMODIFIERS='@im=fcitx'	# multilang keyboard
export GTK_IM_MODULE='fcitx'	# multilang keyboard
export SDL_IM_MODULE='fcitx'	# multilang keyboard
export QT_IM_MODULE='fcitx'		# multilang keyboard
export GIT_DISCOVERY_ACROSS_FILESYSTEM=1 	# github
# export CHROME_EXECUTABLE='/opt/google/chrome/chrome'	# Crome executable path
export CHROME_EXECUTABLE='/usr/bin/vivaldi-stable'	# Crome executable path

alias .src='source ~/.zshrc;'

# .dotfiles github bare repository
alias dots='/usr/bin/git --git-dir=$HOME/.dots --work-tree=$HOME'
alias dots-hide-untracked='/usr/bin/git --git-dir=$HOME/.dots --work-tree=$HOME config --local status.showUntrackedFiles no'

# obsidian journal notebook bare repository
alias cilog="cd $MYSTORAGE/personal/idealogs"

alias ssh-newkey="ssh-keygen -t ed25519 -C"
alias ssh-eval='eval "$(ssh-agent -s)"'
alias ssh-test='ssh -T git@github.com'

alias virt-start-net='sudo virsh net-start default'

# Emacs
export PATH=$PATH:"$HOME/.config/emacs/bin"
alias emacs='emacsclient -c -a "emacs"'

# Tmux
[[ ! -f ~/.tmuxifier/bin/tmuxifier ]] || export PATH=$PATH:"$HOME/.tmuxifier/bin"
[[ ! -f ~/.tmuxifier/bin/tmuxifier ]] || eval "$(tmuxifier init -)" 
alias tm="tmux"
alias tma='tmux attach -t'
alias tmk='tmux kill-session -t'
alias tmka='tmux kill-session -a'
alias tmx="tmuxifier"
alias tmxs="tmuxifier load-session"
alias tmxe="tmuxifier edit-session"
alias tmxl="tmuxifier list-sessions"


# Edit conifigs .edit-config-name --> .ec<>
alias .ect="$EDITOR ~/.tmux.conf"
alias .ecz="$EDITOR ~/zzzz"
alias .eca="$EDITOR ~/.config/alacritty/alacritty.yml"
alias .ech="$EDITOR ~/.config/hypr/hyprland.conf"
alias .ecb="cd ~/.config/bspwm && $EDITOR ~/.config/bspwm/bspwmrc"
alias .ecx="$EDITOR ~/.config/sxhkd/sxhkdrc"
alias .ecp="cd ~/.config/polybar && $EDITOR ~/.config/polybar/config.ini"
alias .eci="cd ~/.config/picom && $EDITOR ~/.config/picom/picom.conf"
alias .eck="cd ~/.config/kitty && $EDITOR kitty.conf"
alias .ecn="cd ~/.config/nvim && $EDITOR ."
alias .ecl="cd ~/.config/lvim && $EDITOR ."


# exa: ls commands with style
alias la='exa -h --long --all --sort=name --icons'
alias ls="exa -h --long --sort=name --icons --classify"

# general aliases
alias cl='clear && neofetch'
alias rbf='fc-cache -fv'
alias nv="$EDITOR"   
alias snv="sudo $EDITOR"
alias k='killall -q'  


# change directories
alias .cgo="$MYSTORAGE/workspace/goenv/src/github.com/sirjager"
alias cds="cd $MYSTORAGE"
alias cob="cd $MYSTORAGE/personal/obsidian"
alias cdw="cd $MYSTORAGE/workspace"
alias cdd="cd $MYSTORAGE/downloads"

# Polybar - Launch and Kill
alias pol="~/.config/polybar/launch.sh"
alias kpol="killall -q polybar && pkill polybar"


# Pamac / Pacman Commands
alias .i='yay --noconfirm --needed -S' # To install a package (always run pacman -Syu, before installing)
alias .ip='sudo pacman --needed -S' # To install a package (always run pacman -Syu, before installing)
alias .r='yay --noconfirm -Rns' # To remove the package, avoid orphaned dependencies and erase its global configuration (which in most cases is the proper command to remove software.)
alias .rp='sudo pacman -Rns' # To remove the package, avoid orphaned dependencies and erase its global configuration (which in most cases is the proper command to remove software.)
alias .u='yay --noconfirm -Syu' # To update the system && Update the database
alias .up='sudo pacman -Syu' # To update the system && Update the database
alias .fp='pacman -Ss' # To search package in offical repositories
alias .ai='sudo pamac build -k --no-confirm' # To install a package from aur repositories
alias .as='sudo pamac search' # To search a package in aur repositories
alias .ar='sudo pamac remove' # To remove package installed from aur
alias .ac='sudo pamac clean' # To clean temps/build tools

# alias .r='sudo pacman -R' # this does not removes orphans or removes configs.  If you want to only remove the package, the following command is sufficient
# alias .rpd='sudo pacman -Rs' # To remove the package and those of its dependencies that arenâ€™t needed by any other application,
# alias .lub='pacman -Qm' # If you want a list of the packages you built and installed locally or packages that are no longer in the official repositories


# # # ! Debian / Ubuntu based Sudo Commands
# alias .pkg='dpkg	-l'
# alias .u='sudo apt-get update'
# alias .fu='sudo apt-get full-upgrade'
# alias .i='sudo apt-get install'
# alias .r='sudo apt remove'
# alias .prg='sudo apt-get remove --purge	&&	sudo apt-get autoremove	&&	sudo apt-get clean'

alias klight="sudo chmod a+rw /sys/class/backlight/amdgpu_bl0/brightness"

# external aliases
if [ -f "$MYSTORAGE/global/alias" ]; then
	source "$MYSTORAGE/global/alias"
fi

export PLATFORM_TOOLS='/mnt/storage/programs/android-studio-sdk/platform-tools'
export PATH=$PATH:$PLATFORM_TOOLS

export FLUTTER_GIT_URL='ssh://git@github.com/flutter/flutter.git'
export FLUTTER_BIN="/mnt/storage/programs/flutter/bin"
export PATH=$PATH:$FLUTTER_BIN

export ANDROID_STUDIO='/mnt/storage/programs/android-studio/bin'
export PATH=$PATH:$ANDROID_STUDIO

export NODE_BIN="/mnt/storage/programs/node/bin"
export PATH=$PATH:$NODE_BIN

# Go programming language
export GO111MODULE="on" export GOPRIVATE="$MYGITHUB/*"
export GOROOT="$MYSTORAGE/programs/go/sdk"
export GOPATH="$MYSTORAGE/workspace/goenv"
export GOBIN="$MYSTORAGE/workspace/goenv/bin"
export GOCACHE="$MYSTORAGE/workspace/goenv/cache"
export GO_BIN="$MYSTORAGE/programs/go/sdk/bin"
export PATH=$PATH:$GO_BIN:"$GOBIN"
# usage > install-go go1.20.4
alias install-go='function _pkg-install-go(){ GOVER=$1 && echo "$GOVER.linux-amd64.tar.gz"; mkdir -p $MYPROGRAMS/go && rm -f $MYPROGRAMS/go/$GOVER.linux-amd64.tar.gz ; rm -rf $MYPROGRAMS/go/sdk ; wget -O $MYPROGRAMS/go/$GOVER.linux-amd64.tar.gz https://golang.org/dl/$GOVER.linux-amd64.tar.gz && tar -C $MYPROGRAMS/go -xzf $MYPROGRAMS/go/$GOVER.linux-amd64.tar.gz && mv $MYPROGRAMS/go/go $MYPROGRAMS/go/sdk && clear && $MYPROGRAMS/go/sdk/bin/go version && rm -f $MYPROGRAMS/go/$GOVER.linux-amd64.tar.gz ; unset -f _pkg-install-go; };_pkg-install-go'

alias install-zsh='sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'

# Proto
export PROTOC_BIN="$MYSTORAGE/programs/protoc/bin"
export PROTOC_WEB_TOOLS="$MYSTORAGE/programs/node/pnpm/global/5/node_modules/grpc-tools/bin"
export PATH=$PATH:$PROTOC_BIN:$PROTOC_WEB_TOOLS

# Pnpm package manager
export PNPM_HOME="$MYSTORAGE/programs/pnpm"
export PATH=$PATH:$PNPM_HOME
alias pn='pnpm'
alias pn-update='sudo wget -qO /bin/pnpm "https://github.com/pnpm/pnpm/releases/latest/download/pnpm-linuxstatic-x64" && sudo chmod +x /bin/pnpm'


alias conda-init='source /mnt/storage/programs/miniconda3/conda-init'


# [[ ! -f $MYSTORAGE/programs/miniconda3/conda-init ]] || . $MYSTORAGE/programs/miniconda3/conda-init && conda activate system

