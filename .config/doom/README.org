#+TITLE: Doom Emacs Configurations
#+AUTHOR: Ankur Kumar (sirjager)
#+PROPERTY: header-args :tangle config.el

* TABLE OF CONTENT :toc:
- [[#doom-emacs-configurations][Doom Emacs Configurations]]
- [[#email-and-fullname][Email And Fullname]]
- [[#fonts-settings][Fonts Settings]]
- [[#theme-settings][Theme Settings]]
- [[#line-numbers][Line Numbers]]
- [[#org-mode-settings][Org Mode Settings]]

* Doom Emacs Configurations
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

* Email And Fullname
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

* Fonts Settings
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:
(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

#+begin_src elisp
;; Font configs
(setq
 doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 16)
 doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 16)
 doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* Theme Settings
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src elisp
;; Doom emacs theme
(setq doom-theme 'doom-one)
#+end_src

* Line Numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src elisp
;; Line numbers
(setq display-line-numbers-type t)
#+end_src

* Org Mode Settings
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src elisp
;; Org mode settings
(setq org-directory "~/org/")
#+end_src


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))
The exceptions to this rule:
  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
