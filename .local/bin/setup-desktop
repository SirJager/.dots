#!/bin/sh

## Author : Ankur Kumar (SirJager)
## Github : @SirJager

_clr() {
    case "$1" in
    "red")
        printf "\033[1;31m$2\033[0m\n"
        ;;
    "green")
        printf "\033[1;32m$2\033[0m\n"
        ;;
    "yellow")
        printf "\033[1;33m$2\033[0m\n"
        ;;
    "orange")
        printf "\033[1;34m$2\033[0m\n"
        ;;
    "purple")
        printf "\033[1;35m$2\033[0m\n"
        ;;
    "blue")
        printf "\033[1;36m$2\033[0m\n"
        ;;
    "gray" | "grey")
        printf "\033[1;37m$2\033[0m\n"
        ;;
    "white")
        printf "\033[1;37m$2\033[0m\n"
        ;;
    *)
        printf "$2\n"
        ;;
    esac
}


_log() {
    if [ "$1" != "" ]; then
        if [ "$2" != "" ]; then
            echo
            _clr yellow "$(date)"
            _clr $1 "$2"
        else
            echo -e "$(date): $1"
        fi
    fi

    if [ "$3" == "exit" ]; then
        if [ "$4" == "0" ]; then
            exit 0
        else
            exit 1
        fi
    fi
}

update_system() {
    echo
    _log blue "Updating system\n"
    sudo pacman -Syyu
}

install_yay() {
    echo
    _log blue "Installing yay package manager\n"
    sudo pacman --needed --noconfirm -S yay &&
        _log green "Installed yay successfully\n" ||
        _log red "Failed to install yay" exit
}

install_amd_graphics(){
  echo
  _log blue "Installing AMD Graphic Drivers..."
  yay --needed --noconfirm -S \
    lib32-mesa vulkan-radeon lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader
  _log green "Installed AMD Graphic Drivers\n"
}


mount_ntfs_storage() {
    echo
    TARGET_NTFS_STORAGE_NAME="STORAGE"
    MOUNT_TARGETED_NTFS_AT_THIS_PATH=/mnt/storage
    NTFS_DRIVE_UUID=$(sudo blkid -s UUID -o value -l -c /dev/null -t LABEL="$TARGET_NTFS_STORAGE_NAME")
    if [ -n "$NTFS_DRIVE_UUID" ]; then
        # Append the entry to /etc/fstab using the stored UUID
        sudo mkdir -p $MOUNT_TARGETED_NTFS_AT_THIS_PATH
        echo "UUID=$NTFS_DRIVE_UUID $MOUNT_TARGETED_NTFS_AT_THIS_PATH ntfs defaults 0 1" | sudo tee -a /etc/fstab
        sudo systemctl daemon-reload
        sudo mount -a
        _log green "Successfully mounted $TARGET_NTFS_STORAGE_NAME ($NTFS_DRIVE_UUID) at path $MOUNT_TARGETED_NTFS_AT_THIS_PATH\n"
    else
        _log red "Error: Unable to retrieve the UUID for the '$TARGET_NTFS_STORAGE_NAME' partition.\n"
    fi
}

install_core_pkgs(){
  echo 
  _log blue "Installing packages for window manager\n"
  yay --needed --noconfirm -S \
    base-devel dash os-prober meson ninja uthash \
    pass archlinux-xdg-menu network-manager-applet \
    htop wget curl git gtk3 gtk4 libconfig pkgconfig \
    gvfs gvfs-afc gvfs-gphoto2 gvfs-mtp gvfs-nfs gvfs-smb \
    grub-btrfs xorg-server xorg-xinit xorg-xsetroot xorg-xbacklight \
    xorg-xinput xorg-xprop xorg-xkill xorg-xwininfo xorg-xrandr \
    xfce4-terminal xclip xsel xdotool playerctl pamixer polkit-gnome \
    dunst feh light fzf ripgrep fd marked shellcheck emacs neovim tmux gufw gtk-engine-murrine \
    xdg-user-dirs-gtk xed i3lock exa imagemagick scrot gnome-keyring python-pywal \
    rofi-emoji rofi-calc
  _log green "Successfully installed required packages for window managers\n"
  echo 
}

setup_tmux() {
    echo " "
    _log cyan "Installing Tmux"
    echo " "
    yay --needed --noconfirm -S tmux
    if [ $? -eq 0 ]; then
        _log green "Successfully installed tmux"
    else
        _log red "Failed to install tmux"
        return 1
    fi

    _log purple "Setting up Tmuxifier..."
    rm -rf ~/.local/share/tmuxifier
    git clone https://github.com/jimeh/tmuxifier.git ~/.local/share/tmuxifier

    # Tmux Plugin Manager
    _log purple "Setting up TPM (Tmux Plugin Manager)\n"
    rm -rf ~/.local/share/tmux/plugins/tpm
    git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/tpm

    _log green "Tmux successfully installed and configured\n"
}


setup_firewall() {
    echo
    _log yellow "Removing other firewalls\n"
    yay --noconfirm -Rns firewalld
    _log blue "Installing Graphical Firewall (gufw)\n"
    yay --noconfirm --needed -S gufw
    _log yellow "Enabling Firewall\n"
    sudo systemctl enable --now ufw
    _log green "Firewall is now active\n"
}


install_and_setup_sddm() {
    echo
    _log blue "Installing SDDM and required dependencies"
    yay --needed --noconfirm -S S sddm qt5-graphicaleffects qt5-quickcontrols2 qt5-svg
    if [ $? -eq 0 ]; then
        _log green "Successfully installed SDDM"
    else
        _log red "Failed to install SDDM"
        return 1
    fi
    _log yellow "Trying to disable other lock screen managers\n"
    sudo systemctl disable lightdm
    sudo systemctl disable gdm
    echo
    _log yellow "Enabling sddm service\n"
    sudo systemctl enable sddm
    echo

    _log yellow "Downloading sddm theme sugar-candy"
    rm -rf ~/Downloads/sugar-candy
    git clone https://github.com/Kangie/sddm-sugar-candy ~/Downloads/sugar-candy
    _log yellow "Applying sddm theme configs"
    echo 'Background="/mnt/storage/wallpaper/sddm.png"' >> ~/Downloads/sugar-candy/theme.conf
    echo 'PartialBlur="false"' >> ~/Downloads/sugar-candy/theme.conf
    cp -f /usr/lib/sddm/sddm.conf.d/default.conf ~/Downloads/sugar-candy/sddm.conf
    echo -e '\n[Theme]\nCurrent=sugar-candy' >>~/Downloads/sugar-candy/sddm.conf
    echo -e '\n[General]\nNumlock=on' >>~/Downloads/sugar-candy/sddm.conf
    sudo rm -f /etc/sddm.conf
    sudo cp -f ~/Downloads/sugar-candy/sddm.conf /etc/sddm.conf
    sudo mv ~/Downloads/sugar-candy /usr/share/sddm/themes/sugar-candy
    _log green "Successfully installed and configured SDDM Lock screen manager\n"
}

uninstall_virt_manager(){
  echo 
  _log blue "Uninstalling Virt-Manager"
  echo 
  yay --noconfirm -Rns virt-manager virt-viewer bridge-utils \
    vde2 libguestfs dnsmasq openbsd-netcat qemu-system-x86 qemu-base
  sudo rm -rf /etc/libvirt 
  _log green "successfully uninstalled Virt-Manager"
}

install_virt_manager(){
    echo
    _log cyan "Installing and setting up KVM Virt-Manager"
    echo " "
    yay --needed --noconfirm -S \
      qemu virt-manager virt-viewer bridge-utils vde2 libguestfs dnsmasq openbsd-netcat
    sudo mv /etc/libvirt/libvirtd.conf /etc/libvirt/libvirtd.conf.bak
    echo -e 'unix_sock_group = "libvirt"' > ~/libvirtd.conf
    echo -e 'unix_sock_ro_perms = "0777"' >> ~/libvirtd.conf 
    echo -e 'unix_sock_rw_perms = "0770"' >> ~/libvirtd.conf 
    sudo mv ~/libvirtd.conf /etc/libvirt/libvirtd.conf 
    sudo systemctl enable --now libvirtd.service
    sudo usermod -a -G libvirt $(whoami)
    sudo systemctl restart libvirtd.service
    sudo virsh net-start default
    echo 
    _log green "Virt-Manager installation complete\n"
}


install_bspwm (){
  echo 
  install_core_pkgs
  echo 
  _log blue "Installing BSPWM ..."
  yay --needed --noconfirm -S \
    bspwm polybar sxhkd picom rofi alacritty kitty xfce4-terminal
  _log green "Bspwm Installed"
  
  _log blue "Installing Jonaburg's Picom fork"
  rm -rf ~/Downloads/picom
  git clone https://github.com/jonaburg/picom
  cd ~/Downloads/picom
  meson --buildtype=release . build 
  ninja -C build
  sudo ninja -C build install
  _log green "Installed Picom"
}

discover_other_os_on_grub(){
  echo 
  _log blue "Setting up Grub Menu..."
  yay --needed --noconfirm -S os-prober
  sudo cat /etc/default/grub > ~/grub
  sudo echo -e "GRUB_DISABLE_OS_PROBER=false" >> ~/grub
  sudo mv /etc/default/grub /etc/default/grub.bak
  sudo mv ~/grub /etc/default/grub
  sudo os-prober
  sudo grub-mkconfig -o /boot/grub/grub.cfg
}


setup_dotfiles_repo() {
    GITHUB_BARE_REPO="https://github.com/sirjager/dotfiles"
    echo
    _log cyan "Setting up dotfiles bare repository"
    echo " "

    rm -rf ~/.dotfiles
    _log purple "Cloning github repository $GITHUB_BARE_REPO ...\n"
    git clone --bare $GITHUB_BARE_REPO ~/.dotfiles

    /usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME checkout
    /usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME config --local status.showUntrackedFiles no

    if [ $? -eq 0 ]; then
        _log green "Successfully configured dotfiles\n"
    else
        _log red "Failed to configure dotfiles"
        _log purple "NOTE: if any of the files already exists, try deleting them first and try again"
        return 1
    fi

    echo -e "\n\n[[ ! -f ~/.config/shell.cfg ]] || source ~/.config/shell.cfg;\n\n" >>~/.bashrc
    source ~/.bashrc
}


install_user_pkgs(){
    echo 
    _log blue "Installing user packages"
    yay --noconfirm --needed -S \
      brave-bin emacs neovim tmux alacritty kitty \
      nemo visual-studio-code-bin \
      ungoogled-chromium-bin qutebrowser ranger feh \
      mpv 
    
    echo 
    _log blue "Cloning Doom Emacs"
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
    _log yellow "Run command to setup : doom sync"
}

install_rog_control_center(){
   echo
   _log blue "Installing Rog Control center"
   yay --needed --noconfirm -S asusctl supergfxctl rog-control-center
   _log yellow "Enabling service"
   sudo systemctl enable --now supergfxd
}

while true; do
    echo " "
    # Prompt user for function choice
    _clr cyan "Choose a function to run:"
    _clr yellow " 1.  Update system"
    _clr yellow " 2.  Install yay"
    _clr yellow " 3.  Install core pkgs"
    _clr yellow " 4.  Mount NTFS storage"
    _clr yellow " 5.  Setup SDDM"
    _clr yellow " 6.  Setup Firewall"
    _clr yellow " 7.  Setup Tmux"
    _clr yellow " 8.  Setup Dotfiles"
    _clr yellow " 9.  Install Bspwm"
    _clr yellow "10.  Install Virt-Manager"
    _clr yellow "11.  Setup Grub Menu Windows Menu entry"
    _clr yellow "12.  Install User packages"
    _clr yellow "13.  Install Rog Control Center"
    _clr yellow "14.  Uninstall Virt-Manager"
    _clr yellow "15.  Install AMD Graphics Driver"
    echo " "
    _clr purple "0. Quit or Ctrl+C"
    read -p "Option number: " choice

    case $choice in
    1)
        update_system
        ;;
    2)
        install_yay
        ;;
    3)
        install_core_pkgs
        ;;
    4)
        mount_ntfs_storage
        ;;
    5)
        install_and_setup_sddm
        ;;
    6)
      setup_firewall
        ;;
    7)
        setup_tmux
        ;;
    8)
        setup_dotfiles_repo
        ;;
    9)
        install_bspwm
        ;;
    10)
        install_virt_manager
        ;;
    11)
        discover_other_os_on_grub
        ;;
    12)
        install_user_pkgs
        ;;
    13)
        install_rog_control_center
        ;;
    14)
        uninstall_virt_manager
        ;;
    15)
        install_amd_graphics
        ;;
    0)
        break
        ;;
    *)
        _log red "Invalid choice. Please choose a valid option."
        ;;
    esac
done

_log green "Script execution complete. Exiting..." exit 0
